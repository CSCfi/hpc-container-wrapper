#!/bin/bash
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
M_SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

calling_name=$(basename $0)
CURR_DIR=$PWD
source $M_SCRIPT_DIR/../common_functions.sh
source $M_SCRIPT_DIR/inst_vars.sh
start=`date +%s`
clean_up () {
    trap '' 2
    if [[ ${CW_DEBUG_KEEP_FILES+defined} ]];then 
        if [[ ${CW_BUILD_TMPDIR+defined} ]];then
            print_err "Build files can be found at $CW_BUILD_TMPDIR, and $_usr_yaml"
        else
            print_err "Program failed before any build files were created"    
        fi
    else
        test -f "$_usr_yaml" && rm "$_usr_yaml"
        test -d "$CW_BUILD_TMPDIR" && rm -r "$CW_BUILD_TMPDIR"
        print_err "Set CW_DEBUG_KEEP_FILES env variable to keep build files"
    fi
    trap 2
    kill  -- -$$ &>/dev/null
    exit 1
}
export _usr_yaml="$(mktemp /tmp/cw-tmp.XXXXXX )";
trap clean_up err
trap clean_up INT
if [[ ! ${CW_GLOBAL_YAML+defined} ]];then
    export CW_GLOBAL_YAML=$M_SCRIPT_DIR/../default_config/config.yaml
fi
print_info "Calling frontend $( basename $SOURCE )" 2
print_info "Calling parsers script $calling_name " 2
print_info "Using $(readlink -f $CW_GLOBAL_YAML) as default config" 2

# We might need to dynamically set values
export SAVE_PP=$PYTHONPATH
if [[ ! ${PYTHONNOUSERSITE+defined} ]];then
    _USERSITE="YES"
    PYTHONNOUSERSITE="YES"
fi
unset PYTHONPATH

$PY_EXE $M_SCRIPT_DIR/$calling_name.py "$@" || exit $? 
if [[ ! -s "$_usr_yaml" ]];then
    test -f $_usr_yaml && rm $_usr_yaml
    # Probably printed the help message
    exit 0
fi


print_info "Constructing configuration" 1
print_info "Parsing user and default configs " 2
CW_BUILD_TMPDIR=$($PY_EXE $M_SCRIPT_DIR/../construct.py $CW_GLOBAL_YAML $_usr_yaml) \
    || { print_err "Configuration construction failed" ; false ;}
export CW_BUILD_TMPDIR
print_info "Using $CW_BUILD_TMPDIR as temporary directory" 1
export PYTHONPATH=$SAVE_PP
if [[ ${_USERSITE+defined} ]];then
    unset PYTHONNOUSERSITE
fi

source $CW_BUILD_TMPDIR/_vars.sh
if [[ ! -d "$CW_INSTALLATION_PREFIX" ]];then
    print_info "Installation dir $CW_INSTALLATION_PREFIX does not exist, creating it for you" 1
    mkdir -p "$CW_INSTALLATION_PREFIX"
fi
if [[ ! -w "$CW_INSTALLATION_PREFIX" || ! -x "$CW_INSTALLATION_PREFIX" ]];then
    print_err "Installation dir $CW_INSTALLATION_PREFIX is not writable"  ; false
fi

if [[ "$(umask)" == "0007" ]];then
    print_info "Umask is 0007" 2
    chmod g+rwx $CW_BUILD_TMPDIR
    chmod o-rwx $CW_BUILD_TMPDIR
elif [[ "$(umask)" == "0002"  ]];then
    print_info "Umask is 0002" 2
    chmod g+rwx $CW_BUILD_TMPDIR
    chmod o+rx $CW_BUILD_TMPDIR
elif [[ "$(umask)" == "0022"  ]];then
    print_info "Umask is 0022" 2
    chmod go+rx $CW_BUILD_TMPDIR
else
   print_warn "Umask set to $CW_UMASK, check permissions of finished installation" 
fi

chgrp $(stat -c "%G" $CW_INSTALLATION_PREFIX ) $CW_BUILD_TMPDIR
chmod g+s $CW_BUILD_TMPDIR

if [[ "$CW_INSTALLATION_PREFIX" = /* ]]; then
   export _inst_path=$CW_INSTALLATION_PREFIX
else
   export _inst_path=$(realpath -s $PWD/$CW_INSTALLATION_PREFIX )
fi

if ! command -v $CW_SINGULARITY_EXECUTABLE_PATH &>/dev/null; then
	{ print_err "The command $CW_SINGULARITY_EXECUTABLE_PATH does not exists
	Verify that the value for 'singularity_executable_path' in $CW_GLOBAL_YAML is correct"; false ;}
fi

print_info "Validating the set singularity command $CW_SINGULARITY_EXECUTABLE_PATH" 2
num_res=$($CW_SINGULARITY_EXECUTABLE_PATH --help | grep "build\|exec\|shell" 2>/dev/null | wc -l)
if [[ "$num_res" -lt 3 ]];then
	{ print_err "$CW_SINGULARITY_EXECUTABLE_PATH does not seem to be a valid apptainer/singularity executable"; false ;}
fi



$M_SCRIPT_DIR/../pre.sh || { print_err "Failed getting container image"; false ;}
# Nothing to do if we are just wrapping a container
if [[ ! "$CW_MODE" == "wrapcont" ]];then
    $M_SCRIPT_DIR/../create_inst.sh || { print_err "Installation failed" ; false ;} 
fi

if [[ "$CW_CREATE_WRAPPERS" == "yes"  ]]; then
    $M_SCRIPT_DIR/../generate_wrappers.sh || { print_err "Wrapper generation failed"; false ;}
fi
$M_SCRIPT_DIR/../post.sh || { print_err "Failed to move to install dir"; false ; }
test -f "$_usr_yaml" && rm "$_usr_yaml"
end=`date +%s`


if command -v tykky &>/dev/null ; then
    _env_root=$(realpath $(dirname $_inst_path))
    _env_name=$CW_INSTALLATION_PREFIX
    IFS=':' read -r -a _paths <<< "${TYKKY_PATH:-$HOME/.tykky}"
    for _path in "${_paths[@]}"; do
        if [ "$_env_root" = "$(realpath $_path)" ]; then
            _env_name=$(basename $CW_INSTALLATION_PREFIX)
            break
        fi
    done
    info_msg="Environment has been installed to $CW_INSTALLATION_PREFIX
\tTo use, activate with:
\ttykky activate $_env_name
\tAlternatively, add the bin folder to your path e.g:
\texport PATH=\"$_inst_path/bin:\$PATH\"" 
else
    info_msg="Program has been installed to $CW_INSTALLATION_PREFIX
\tTo use add the bin folder to your path e.g:
\texport PATH=\"$_inst_path/bin:\$PATH\""
fi
print_info "Done, duration: $((end-start))s" 1
print_info "$info_msg" 1
